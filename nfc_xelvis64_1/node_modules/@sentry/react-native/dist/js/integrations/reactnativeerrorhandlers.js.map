{"version":3,"file":"reactnativeerrorhandlers.js","sourceRoot":"","sources":["../../../src/js/integrations/reactnativeerrorhandlers.ts"],"names":[],"mappings":"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","sourcesContent":["import { eventFromException } from \"@sentry/browser\";\nimport { getCurrentHub } from \"@sentry/core\";\nimport { Integration, Severity } from \"@sentry/types\";\nimport { addExceptionMechanism, getGlobalObject, logger } from \"@sentry/utils\";\n\nimport { ReactNativeClient } from \"../client\";\n\n/** ReactNativeErrorHandlers Options */\ninterface ReactNativeErrorHandlersOptions {\n  onerror: boolean;\n  onunhandledrejection: boolean;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const global: any;\n\n/** ReactNativeErrorHandlers Integration */\nexport class ReactNativeErrorHandlers implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = \"ReactNativeErrorHandlers\";\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = ReactNativeErrorHandlers.id;\n\n  /** ReactNativeOptions */\n  private readonly _options: ReactNativeErrorHandlersOptions;\n\n  /** Constructor */\n  public constructor(options?: ReactNativeErrorHandlersOptions) {\n    this._options = {\n      onerror: true,\n      onunhandledrejection: true,\n      ...options,\n    };\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    this._handleUnhandledRejections();\n    this._handleOnError();\n  }\n\n  /**\n   * Handle Promises\n   */\n  private _handleUnhandledRejections(): void {\n    if (this._options.onunhandledrejection) {\n      const tracking: {\n        disable: () => void;\n        enable: (arg: unknown) => void;\n        // eslint-disable-next-line @typescript-eslint/no-var-requires,import/no-extraneous-dependencies\n      } = require(\"promise/setimmediate/rejection-tracking\");\n\n      tracking.disable();\n      tracking.enable({\n        allRejections: true,\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        onUnhandled: (id: any, error: any) => {\n          if (__DEV__) {\n            // We mimic the behavior of unhandled promise rejections showing up as a warning.\n            // eslint-disable-next-line no-console\n            console.warn(id, error);\n          }\n          getCurrentHub().captureException(error, {\n            data: { id },\n            originalException: error,\n          });\n        },\n      });\n\n      /* eslint-disable\n        @typescript-eslint/no-var-requires,\n        import/no-extraneous-dependencies,\n        @typescript-eslint/no-explicit-any,\n        @typescript-eslint/no-unsafe-member-access\n      */\n      const Promise = require(\"promise/setimmediate/core\");\n      const _global = getGlobalObject<any>();\n\n      /* In newer RN versions >=0.63, the global promise is not the same reference as the one imported from the promise library.\n        Due to this, we need to take the methods that tracking.enable sets, and then set them on the global promise.\n        Note: We do not want to overwrite the whole promise in case there are extensions present.\n\n        If the global promise is the same as the imported promise (expected in RN <0.63), we do nothing.\n      */\n      const _onHandle = Promise._onHandle ?? Promise._Y;\n      const _onReject = Promise._onReject ?? Promise._Z;\n\n      if (\n        Promise !== _global.Promise &&\n        typeof _onHandle !== \"undefined\" &&\n        typeof _onReject !== \"undefined\"\n      ) {\n        if (\"_onHandle\" in _global.Promise && \"_onReject\" in _global.Promise) {\n          _global.Promise._onHandle = _onHandle;\n          _global.Promise._onReject = _onReject;\n        } else if (\"_Y\" in _global.Promise && \"_Z\" in _global.Promise) {\n          _global.Promise._Y = _onHandle;\n          _global.Promise._Z = _onReject;\n        }\n      }\n      /* eslint-enable\n        @typescript-eslint/no-var-requires,\n        import/no-extraneous-dependencies,\n        @typescript-eslint/no-explicit-any,\n        @typescript-eslint/no-unsafe-member-access\n      */\n    }\n  }\n  /**\n   * Handle errors\n   */\n  private _handleOnError(): void {\n    if (this._options.onerror) {\n      let handlingFatal = false;\n\n      const defaultHandler =\n        ErrorUtils.getGlobalHandler && ErrorUtils.getGlobalHandler();\n\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      ErrorUtils.setGlobalHandler(async (error: any, isFatal?: boolean) => {\n        // We want to handle fatals, but only in production mode.\n        const shouldHandleFatal = isFatal && !__DEV__;\n        if (shouldHandleFatal) {\n          if (handlingFatal) {\n            logger.log(\n              \"Encountered multiple fatals in a row. The latest:\",\n              error\n            );\n            return;\n          }\n          handlingFatal = true;\n        }\n\n        const currentHub = getCurrentHub();\n        const client = currentHub.getClient<ReactNativeClient>();\n\n        if (!client) {\n          logger.error(\n            \"Sentry client is missing, the error event might be lost.\",\n            error\n          );\n\n          // If there is no client something is fishy, anyway we call the default handler\n          defaultHandler(error, isFatal);\n\n          return;\n        }\n\n        const options = client.getOptions();\n\n        const event = await eventFromException(options, error, {\n          originalException: error,\n        });\n\n        if (isFatal) {\n          event.level = Severity.Fatal;\n\n          addExceptionMechanism(event, {\n            handled: false,\n            type: \"onerror\",\n          });\n        }\n\n        currentHub.captureEvent(event);\n\n        if (!__DEV__) {\n          void client.flush(options.shutdownTimeout || 2000).then(() => {\n            defaultHandler(error, isFatal);\n          });\n        } else {\n          // If in dev, we call the default handler anyway and hope the error will be sent\n          // Just for a better dev experience\n          defaultHandler(error, isFatal);\n        }\n      });\n    }\n  }\n}\n"]}