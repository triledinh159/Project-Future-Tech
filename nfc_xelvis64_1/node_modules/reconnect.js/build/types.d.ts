export declare type initialValueOrGetter<T> = T | (() => T);
export declare type nextValueOrGetter<T> = T | ((currValue: T) => T | Promise<T>);
export declare type valueChangeListener<T> = (value: T) => void;
export declare type unregisterOutlet = () => void;
/**
 * An outlet let producers or consumers to publish or subscribe value changes.
 */
export interface Outlet<T> {
    /**
     * Subscribe to value changes.
     *
     * @param handler - The value change listener function
     * @returns A function to unregister the value change
     */
    register: (handler: valueChangeListener<T>) => unregisterOutlet;
    /**
     * Change the value backed by this outlet and publish to all subscribers.
     *
     * @param value - The value you'd like to change or a callback function to produce the value.
     */
    update: (value: nextValueOrGetter<T>) => void;
    /**
     * Get the value backed by this outlet
     */
    getValue: () => T;
    /**
     * Get the subscribers count for this outlet
     */
    getRefCnt: () => number;
}
/**
 * The options used to create an outlet.
 */
export interface OutletOptions {
    /**
     * Used to indicate whether reconnect.js should automatically remove the outlet
     * when the number of subscribers down to 0.
     */
    autoDelete?: boolean;
}
